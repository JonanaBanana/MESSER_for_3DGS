import numpy as np
import open3d as o3d
import csv
import os
from copy import deepcopy

######################### CONSTANTS ###############################
voxel_size = 0.08
min_x = 1 #min distance to keep points
max_x = 200 #max distance to keep points
f = 1108.5125019853992
h = 720
w = 1280
px = 640
py = 360
fov_x = 2*np.arctan2(w,(2*f))
fov_y = 2*np.arctan2(h,(2*f))
#projection matrix to project 3d points to image plane
proj_mat = np.array([[f, 0, px, 0],
                    [0, f, py, 0],
                    [0, 0, 1, 0]])
fast_lio = True
viz = False
#################################################################

########################## PATHS ################################
main_path = '/home/jonathan/Reconstruction/test_stage_chessboard_3'
image_path = os.path.join(main_path,'input')
pcd_path = os.path.join(main_path,'pcd')
img_path = os.path.join(main_path,'input/')
accumulated_path = os.path.join(main_path,'pcd/accumulated_point_cloud.pcd')
downsampled_path = os.path.join(main_path,'downsampled_point_cloud.pcd')
scans_path = os.path.join(main_path,'scans.pcd')
transform_path = os.path.join(main_path,'transformations.csv')
output_path = os.path.join(main_path,'point_cloud_color_information.csv')
#################################################################

############# Transformation matrix to camera frame #############
trans_mat = np.array([[0.0, 0.0, 1.0, 0.0],
                    [-1.0, 0.0, 0.0, 0.0],
                    [0.0, -1.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 1.0]])
#################################################################




#read transform table
with open(transform_path, 'r') as file:
    reader = csv.reader(file)
    transform_data = []
    for row in reader:
        row = [float(i) for i in row]
        transform_data.append(row)
transform_data = np.array(transform_data)
transform = np.reshape(transform_data,(-1,4,4))
N,_,_ = np.shape(transform)
print("Found",N,'transforms!')